#!/usr/bin/perl

use Cwd 'abs_path';
use File::Basename;

# root crontab
# 0 1 * * 3 /path/to/clam_run_conf -c /path/to/conffile.conf


# usage:
# clam_run_conf -c [pathtoconf1] -c [pathtoconf2]
# no limit on conf inputs
# will DIE on first incorrectly formatted conf - following confs will NOT be run!

### variables
$timeNow = &getTimeStampString;
$debug = 0;
@mailLog = ();

my $scriptPath = abs_path($0);
my $scriptDir = dirname($scriptPath);


$ENV{'PATH'} .= ":/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:$scriptDir";

&main;

sub main {
	&processArguments;
}


sub processArguments {
	$ranSomething = 0;
	for (my $i = 0; $i < scalar(@ARGV); $i++) {
		my $arg = $ARGV[$i];
		if ($arg =~ /^-(\w)/) {
			$arg = $1;
			&processArgument($arg, $ARGV[$i + 1]);
		}
	}
	if ($ranSomething == 0) {
		print "Usage: clam_run_conf -c [pathtoconf1] -c [pathtoconf2]\n\nno limit on conf inputs\nwill DIE on first incorrectly formatted conf - following confs will NOT be run!\n";
	}

}


sub processArgument {
	my $arg = $_[0];
	my $nextArg = $_[1];
	if ($arg eq "c" && $nextArg ne "") { #maybe do -e
		my $confFile = $nextArg;
		my %clamJob = &loadConfFile($confFile);
		&runClamJob(\%clamJob);
	} elsif ($arg eq "d") {
		$debug = 1;
	}
}

sub processConf {
	my $confFile = shift @_;
	my @confContents = @_;
	my %clamJob = &generateConfDefaults;
	$clamJob{"confFile"} = $confFile;
	foreach my $line (@confContents) { ## read the conf file and set each key value pair in hash to what's in the conf document
		$line =~ s/#.*$//;

		$line =~ s/\$timeNow/$timeNow/i;

		$line =~ /^([\-\w]+)\s?=\s?\"(.*)\"/;
		my $option = $1;
		my $value = $2;
		# print "$option is $value\n";
		$clamJob{$option} = $value;
	}

	$clamJob{'logDirectory'} = &checkTrailingSlash("$clamJob{'logDirectory'}");
	$clamJob{'logFile'} = $clamJob{'logDirectory'} . "clam_run_conf-" . $clamJob{'jobName'} . "-$timeNow";
	$clamJob{'lockFile'} = "/tmp/$clamJob{'jobName'}.lock";

	&checkValidity(\%clamJob);
	return %clamJob;
}

sub generateConfDefaults {
	my %clamJob;
	$clamJob{'mailInfectionOnly'} = "NO";
	$clamJob{'detectPUA'} = "NO";
	$clamJob{'scanArchive'} = "YES";
	$clamJob{'infectedOnly'} = "YES";
	$clamJob{'recursive'} = "YES";
	return %clamJob;
}


sub generateClamCommand {
	my %clamJob = %{$_[0]};
	my $arguments;
	if ($clamJob{'infectedOnly'} =~ /yes/i) {
		$arguments .= " -i";
	}
	if ($clamJob{'recursive'} =~ /yes/i) {
		$arguments .= " -r";
	}

	$arguments .= $clamJob{'arguments'};

	if ($clamJob{'detectPUA'} =~ /yes/i) {
		$arguments .= " --detect-pua=yes";
	}
	if ($clamJob{'scanArchive'} =~ /yes/i) {
		$arguments .= " --scan-archive=yes";
	}

	my $exclusionsArgs = "";
	$exclusionsArgs = &processExcludeFile($clamJob{'excludeFile'});

	my $clamCommand = "clamscan $arguments -l '$clamJob{'logFile'}' $exclusionsArgs '$clamJob{'scanDirectory'}'";
	return $clamCommand;
}

sub processExcludeFile {
	my $excludeFile = $_[0];
	open EXCLUDE, "$excludeFile" or &logit("no exclude file provided, still using defaults");
	my @allExclusions = <EXCLUDE>;
	close EXCLUDE;

	my @fileExclusions;
	my @dirExclusions = ('^/sys', '^/dev', '^/proc');
	my $mode;
	foreach(@allExclusions) {
		chomp($_);
		if ($_ =~ /FILE EXCLUSIONS:/) {
			$mode = "file";
			next;
		} elsif ($_ =~ /DIRECTORY EXCLUSIONS:/) {
			$mode = "dir";
			next;
		}

		if ($mode eq "file" && $_ !~ /^$/) {
			push @fileExclusions, $_;
		}
		if ($mode eq "dir" && $_ !~ /^$/) {
			push @dirExclusions, $_;
		}
	}

	my $exclusionsArgs;
	foreach (@fileExclusions) {
		$exclusionsArgs .= " --exclude=$_";
	}
	foreach (@dirExclusions) {
		$exclusionsArgs .= " --exclude-dir=$_";
	}

	return $exclusionsArgs;
}

sub runClamJob {
	my %clamJob = %{$_[0]};
	my $lockFile = $clamJob{'lockFile'};

	#open LOG file
	$ranSomething = 1;
	# open LOG, ">>$logFile";
	if (-e $lockFile) {
		&logit("$timeNow lockfile $lockFile exists - make sure backup isn't running right now\n");
		die "lockfile $lockFile exists  - make sure backup isn't running right now\n";
	}
	open LOCK, ">$lockFile";

	&logit("------------------------------");

	@mailLog = ();

	#run backup

	$timeNow = &getTimeStampString;

	&logit("### $timeNow: Starting $clamJob{'jobName'} scan...\n");
	# >/dev/null 2>&1

	my $clamCommand = &generateClamCommand(\%clamJob);
	&logit("\n* `$clamCommand`\n\n");
	my $runClam = "not run";
	if ($debug == 0) {
		$runClam = system("$clamCommand");
		$runClam = processReturnCode($runClam);
	}
	&logit("#### $clamJob{'jobName'} clamscan script ran successful: *$runClam*\n\n");

	my @pruneTailIndent;
	# &logit("##### pruning: $clamJob{'prune'}");
	# if ($clamJob{"prune"} eq "yes" && $debug == 0) {
	#
	# 	my $pruneCommand = &generatePruneCommand(\%clamJob);
	# 	&logit("\n* `$pruneCommand`\n\n");
	# 	my $runPrune = "not run";
	# 	$runPrune = system("$pruneCommand"); ## dry run on debug mode
	# 	$runPrune = processReturnCode($runPrune);
	# 	&logit("#### $clamJob{'backupName'} prune borg script ran successful: *$runPrune*\n");
	# 	my $pruneTail = `cat '$clamJob{'pruneLogSTDOUT'}'`;
	# 	@pruneTailIndent = &indent(1, $pruneTail);
	#
	# }


	$timeNow = &getTimeStampString;
	&logit("#### $timeNow: $clamJob{'jobName'} backup finished!\n\n");


	my $tail = `cat '$clamJob{'logFile'}'`;
	my @tailIndent = &indent(1, $tail);
	push @mailLog, @pruneTailIndent;
	push @mailLog, @tailIndent;



	#close LOG

	close LOCK;
	unlink $lockFile;

	if ($clamJob{'mailInfectionOnly'} =~ /yes/i && $runClam != 0) {
		&mailReport($clamJob{'mailReport'}, $clamJob{'jobName'});
	} elsif ($clamJob{'mailInfectionOnly'} !~ /yes/i) {
		&mailReport($clamJob{'mailReport'}, $clamJob{'jobName'});
	}


	if (exists($clamJob{'onSuccessExit'})) { # this may not be necessary?
		# &finishCommand
		if (($runClam == 0 || $runPrune == 0)) {
			&finishCommand($clamJob{'onSuccessExit'})
		}
	}

	if (exists($clamJob{'onFailureExit'})) {
		my $runCommand = 0;
		if ($runClam != 0 && $runClam ne "not run") {
			$runCommand = 1;
		}

		if ($runCommand == 1) {
			&finishCommand($clamJob{'onFailureExit'})
		}
	}

}

sub processReturnCode {
	my $code = $_[0];
	my $rval = "";

	if ($code == -1) {
		return "Failed to execute the command.\n";
	} elsif ($code & 127) {
		$rval = $code & 127;
	} else {
		$rval = $code >> 8;
	}

	return $rval;

}

sub finishCommand {
	my $command = $_[0];
	&logit("running $command");
	my $rCode = 0;
	if ($debug == 0) {
		$rCode = system("$command");
	}
	$rCode = processReturnCode($rCode);
	return $rCode;
}

sub generatePruneCommand {
	my %clamJob = %{$_[0]};

	my $pruneCommand = "borg prune -v $clamJob{'repository'} --list ";
	if (exists($clamJob{"keep-daily"})) {
		$pruneCommand .= "--keep-daily=$clamJob{'keep-daily'} ";
	}
	if (exists($clamJob{"keep-weekly"})) {
		$pruneCommand .= "--keep-weekly=$clamJob{'keep-weekly'} ";
	}
	if (exists($clamJob{"keep-monthly"})) {
		$pruneCommand .= "--keep-monthly=$clamJob{'keep-monthly'} ";
	}
	if (exists($clamJob{"keep-within"})) {
		$pruneCommand .= "--keep-within=$clamJob{'keep-within'} ";
	}
	if (exists($clamJob{"keep-last"})) {
		$pruneCommand .= "--keep-last=$clamJob{'keep-last'} ";
	}
	if (exists($clamJob{"keep-hourly"})) {
		$pruneCommand .= "--keep-hourly=$clamJob{'keep-hourly'} ";
	}
	if (exists($clamJob{"keep-yearly"})) {
		$pruneCommand .= "--keep-yearly=$clamJob{'keep-yearly'} ";
	}
	if (exists($clamJob{"prefix"})) {
		$pruneCommand .= "--prefix='$clamJob{'prefix'}' ";
	}
	if ($debug == 1) {
		$pruneCommand .= "--dry-run "
	}



	$pruneCommand .= "> '$clamJob{'pruneLogSTDOUT'}' 2>&1";
	return $pruneCommand;
}

sub logit {
	my $log = shift @_;

	if ($log !~ /^.*\n$/) { #add newline if none
		$log .= "\n";
	}

	print "$log";
	# if ($debug == 0) {
	# 	print LOG "$log";
	# }
	push @mailLog, $log;
}

sub mailReport {
	my $mailTo = $_[0];
	my $clamavJobName = $_[1];

	if ($mailTo eq "") { #skip if no mail report set
		return;
	}

	my $dateString = &getDateString;
	my $host = `hostname`;
	chomp($host);
	my $from = "clamavReport\@$host";
	my $subject = "ClamAV Report for $clamavJobName - $dateString";
	my $message;

	foreach(@mailLog) {
		$message .= $_;
	}

	my $tmpMD = "/tmp/$clamavJobName.md";
	open TMP, ">$tmpMD";
	print TMP "$message";
	close TMP;
	my $execDir = &getExecutableDirectory;
	my $mdCommand = $execDir . "/markdown/Markdown.pl '$tmpMD'";
	my $md = `$mdCommand`;
	unlink $tmpMD;

	open(MAIL, "|/usr/sbin/sendmail -t");

	# Email Header
	print MAIL "To: $mailTo\n";
	print MAIL "From: $from\n";
	print MAIL "Subject: $subject\n";
	print MAIL "Content-Type: text/html; charset=UTF-8\n\n\n";
	# Email Body
	print MAIL $md;

	close(MAIL);
	&logit('email sent successufully');
	# print "Email Sent Successfully\n";
}

sub getExecutableDirectory {
	my $fullPath = abs_path($0);
	my $dirname  = dirname($fullPath);
	return $dirname;
}

sub loadConfFile {
	my $confFile = $_[0];
	open CONF, "$confFile" or die "can't open conf file: $!";
	my @confContents = <CONF>;
	close CONF;
	my %clamJob = &processConf($confFile, @confContents);
	return %clamJob;
}

sub indent {
	my $indentCount = $_[0];
	my $str = $_[1];

	my @lines = split "\n", $str;
	my $tab;
	for (my $i = 0; $i < $indentCount; $i++) {
		$tab .= "\t";
	}

	foreach(@lines) {
		$_ = "$tab$_\n";
	}
	return @lines;
}


sub checkValidity {
	my %clamJob = %{$_[0]};
	my $confFile = $clamJob{"confFile"};
	&checkValidityInVar($clamJob{"scanDirectory"}, $confFile);
	&checkValidityInVar($clamJob{"logDirectory"}, $confFile);
	&checkValidityInVar($clamJob{"jobName"}, $confFile);
	&checkValidityInVar($clamJob{"mailReport"}, $confFile);
}

sub checkValidityInVar { ## pass a variable in, if it's empty, it's considered invalid and kills script - confFile is included so it can report which one failed
	my $var = $_[0];
	my $confFile = $_[1];

	if ($var eq "") {
		&printConfInfo;
		die "\nERROR: missing information in conf file: $confFile\n";
	}
}

sub checkTrailingSlash {
	my $str = $_[0];
	if ($str !~ /\/$/) {
		$str .= "/";
	}
	return $str;
}

sub printConfInfo {
	print 'The conf file consists of each line designating a different option. You must specify a conf file and you must include all the following options in your conf file:

scanDirectory = "/PATH/TO/SCAN/DIRECTORY"
logDirectory = "/PATH/TO/LOG/DIRECTORY" ##this needs to have unique filenames for each scan
jobName = "root drive scan" #for logging and mailing purposes
mailReport = "email@address.com" # address to email reports to
mailInfectionOnly = "NO" #optional - defaults to NO (will email whether theres an infection or not)
excludeFile = "/PATH/TO/EXCLUDE/FILE" ## optional
detectPUA = "NO" #optional - defaults to NO
scanArchive = "YES" #optional - defaults to YES
infectedOnly = "YES" #optional - defaults to YES
recursive = "YES" #optional - defaults to YES
arguments = "[clamscan arguments]" #optional - additional arguments beyond whats provided in this interface
onSuccessExit = "command" # optional: an optional command to run on finish



You may comment information with "#":
# this is a comment
';
}

sub getTimeStampString() {
	($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);

	$year += 1900;
	$mon += 1;
	$mon = sprintf("%02d", $mon);
	$mday = sprintf("%02d", $mday);
	$hour = sprintf("%02d", $hour);
	$min = sprintf("%02d", $min);
	$string = "$year$mon$mday-$hour$min";
	return $string;
}

sub getDateString() {
	($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);

	$mon += 1;
	my $string = "$mon/$mday";
	return $string;

}
